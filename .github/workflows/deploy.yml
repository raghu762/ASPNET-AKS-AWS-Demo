name: Build and Deploy to AWS EKS

on:
  push:
    branches: [ "main" ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1                 # Change if needed
      ECR_REPOSITORY: demoapp               # Your ECR repo name
      EKS_CLUSTER_NAME: my-eks-cluster      # Your EKS cluster name
      IMAGE_TAG: latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout source
        uses: actions/checkout@v4

      # 2️⃣ Set up .NET SDK (match your version — use 9.0 if your app targets .NET 9)
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 3️⃣ Build the .NET app
      - name: Build .NET app
        working-directory: DemoApp
        run: |
          dotnet restore
          dotnet publish -c Release -o out

      # 4️⃣ Configure AWS credentials from GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 5️⃣ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6️⃣ Build, tag, and push Docker image to ECR
      - name: Build and Push Docker image
        working-directory: DemoApp
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # 7️⃣ Update kubeconfig for EKS (authentication step)
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      # 8️⃣ Deploy to EKS
      - name: Deploy to EKS
        run: |
          # Apply deployment and service manifests
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

          # Optionally update image dynamically
          kubectl set image deployment/demoapp-deployment demoapp=${{ env.IMAGE_URI }} || true
